// Initialize Supabase client (replace with your actual project URL and anon key)
const supabaseUrl = 'YOUR_SUPABASE_URL'; // e.g., 'https://wizyuwbezyltaxatkupc.supabase.co'
const supabaseAnonKey = 'YOUR_SUPABASE_ANON_KEY'; // e.g., 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'

const supabase = supabase.createClient(supabaseUrl, supabaseAnonKey);

// --- Supabase Authentication Functions ---

// Function to handle user sign-up
async function signUp(email, password) {
    const { user, session, error } = await supabase.auth.signUp({
        email: email,
        password: password,
    });

    if (error) {
        console.error('Supabase Sign Up Error:', error.message);
        alert('Sign up failed: ' + error.message);
        return null;
    }
    alert('Sign up successful! Please check your email to confirm your account.');
    console.log('User signed up:', user);
    return { user, session };
}

// Function to handle user sign-in
async function signIn(email, password) {
    const { user, session, error } = await supabase.auth.signIn({
        email: email,
        password: password,
    });

    if (error) {
        console.error('Supabase Sign In Error:', error.message);
        alert('Login failed: ' + error.message);
        return null;
    }
    alert('Login successful!');
    console.log('User signed in:', user);
    return { user, session };
}

// Function to handle user sign-out
async function signOut() {
    const { error } = await supabase.auth.signOut();

    if (error) {
        console.error('Supabase Sign Out Error:', error.message);
        alert('Logout failed: ' + error.message);
        return false;
    }
    alert('Logged out successfully!');
    console.log('User logged out.');
    return true;
}

// Function to handle password reset
async function resetPassword(email) {
    const { error } = await supabase.auth.api.resetPasswordForEmail(email);

    if (error) {
        console.error('Supabase Password Reset Error:', error.message);
        alert('Password reset failed: ' + error.message);
        return false;
    }
    alert('Password reset email sent! Check your inbox.');
    console.log('Password reset email sent to:', email);
    return true;
}

// --- Integrate with your existing login form ---

document.addEventListener('DOMContentLoaded', function() {
    const loginForm = document.getElementById('loginForm');
    const forgotPasswordForm = document.getElementById('forgotPasswordForm');
    const forgotPasswordModal = document.getElementById('forgotPasswordModal');
    const selectedRoleInput = document.getElementById('selectedRole'); // Assuming this exists for role selection

    // Handle Login Form Submission
    if (loginForm) {
        loginForm.addEventListener('submit', async function(event) {
            event.preventDefault();

            const username = document.getElementById('username').value;
            const password = document.getElementById('password').value;
            const role = selectedRoleInput.value; // Get the selected role

            // In a real application, you might have different Supabase tables or RLS policies
            // based on roles. For this example, we'll just use the standard email/password login.
            // You would then fetch user metadata or check a 'profiles' table to determine the role.

            const { user, session } = await signIn(username, password);

            if (user) {
                // Store user and session information (e.g., in localStorage or a global state)
                localStorage.setItem('isLoggedIn', 'true');
                localStorage.setItem('loggedInUser', JSON.stringify({
                    id: user.id,
                    email: user.email,
                    role: role // This role is from the UI selection, not Supabase directly
                }));
                localStorage.setItem('supabaseSession', JSON.stringify(session));

                // Redirect or show dashboard
                showSchoolSiteUi(); // Assuming this function exists in your original script
                addAuditLog(user.email, 'Logged In', 'Authentication', `Successful login for role: ${role}`); // Assuming addAuditLog exists
            }
        });
    }

    // Handle Forgot Password Form Submission
    if (forgotPasswordForm) {
        forgotPasswordForm.addEventListener('submit', async function(event) {
            event.preventDefault();
            const email = document.getElementById('forgotEmail').value;

            if (email) {
                const success = await resetPassword(email);
                if (success) {
                    forgotPasswordModal.classList.remove('active');
                    forgotPasswordForm.reset();
                }
            } else {
                alert('Please enter your email address.');
            }
        });
    }

    // Handle Logout Button
    const logoutButton = document.getElementById('logoutButton');
    if (logoutButton) {
        logoutButton.addEventListener('click', async function() {
            if (confirm('Are you sure you want to logout?')) {
                const success = await signOut();
                if (success) {
                    localStorage.clear(); // Clear all local storage including Supabase session
                    showLoginUi(); // Assuming this function exists in your original script
                    // Reset any UI states as needed
                }
            }
        });
    }

    // Check Supabase session on page load
    async function checkSupabaseSession() {
        const { data: { session }, error } = await supabase.auth.getSession();

        if (session) {
            console.log('Active Supabase session:', session);
            // You might want to fetch user details from your 'profiles' table here
            // to get the actual role and other metadata.
            const { data: profile, error: profileError } = await supabase
                .from('profiles') // Assuming you have a 'profiles' table
                .select('role, full_name')
                .eq('id', session.user.id)
                .single();

            if (profileError) {
                console.error('Error fetching profile:', profileError.message);
                // Handle case where profile might not exist or error occurs
                localStorage.clear();
                showLoginUi();
                return;
            }

            localStorage.setItem('isLoggedIn', 'true');
            localStorage.setItem('loggedInUser', JSON.stringify({
                id: session.user.id,
                email: session.user.email,
                role: profile ? profile.role : 'unknown', // Use role from profile
                name: profile ? profile.full_name : session.user.email // Use full name from profile
            }));
            localStorage.setItem('supabaseSession', JSON.stringify(session));
            showSchoolSiteUi();
        } else {
            console.log('No active Supabase session.');
            localStorage.clear(); // Ensure no stale login state
            showLoginUi();
        }
    }

    // Call this function when the page loads to check the session
    checkSupabaseSession();

    // Listen for auth state changes (e.g., when user logs in/out from another tab)
    supabase.auth.onAuthStateChange((event, session) => {
        console.log('Supabase auth state changed:', event, session);
        if (event === 'SIGNED_IN' && session) {
            // User just signed in, update local storage and UI
            localStorage.setItem('isLoggedIn', 'true');
            localStorage.setItem('loggedInUser', JSON.stringify({
                id: session.user.id,
                email: session.user.email,
                // Role would typically be fetched from a 'profiles' table
                role: 'unknown' // Placeholder, fetch from DB
            }));
            localStorage.setItem('supabaseSession', JSON.stringify(session));
            showSchoolSiteUi();
        } else if (event === 'SIGNED_OUT') {
            // User just signed out, clear local storage and show login UI
            localStorage.clear();
            showLoginUi();
        }
    });
});
